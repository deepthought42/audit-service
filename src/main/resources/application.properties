########
#
#    PRODUCTION ENVIRONMENT SETTINGS
#
########

server.port=8080
#server.port=443
spring.mvc.throw-exception-if-no-handler-found=true
spring.resources.add-mappings=false
spring.http.encoding.force-response=true

# Only enable Secret Manager if you're actually using it
# spring.cloud.gcp.secretmanager.enabled=false

management.server.port=80
management.server.ssl.enabled=false
management.health.pubsub.enabled=false

#logging.level.*=INFO
logging.file=look-see.log

# Debug logging to troubleshoot bean creation
logging.level.org.springframework.beans=DEBUG
logging.level.com.looksee=DEBUG

# Exclude problematic auto-configuration to prevent duplicate repository beans
#spring.autoconfigure.exclude=com.looksee.config.LookseeCoreAutoConfiguration

# Allow bean overriding for any remaining conflicts
#spring.main.allow-bean-definition-overriding=true

# Disable Secret Manager auto-configuration to prevent protobuf conflicts
spring.cloud.gcp.secretmanager.enabled=false
# spring.cloud.gcp.secretmanager.allow-default-secret=false

#################################
# SPRING MAIL SMTP SETTINGS
#################################
#spring.mail.host=SMTP_HOST_HERE
#spring.mail.username=USERNAME_HERE
#spring.mail.password=PASSWORD_HERE
#spring.mail.properties.mail.transport.protocol=TRANSPORT_PROTOCOL_HERE
#spring.mail.smtp.port=PORT
#spring.mail.smtp.auth=true/false
#spring.mail.smtp.starttls.enable=true/false

#####################################
# NEO4J SPRING DATA 
#####################################
#spring.data.neo4j.uri=NEO4J_BOLT_URI
#spring.data.neo4j.username=NEO4J_USERNAME
#spring.data.neo4j.password=NEO4J PASSWORD
#spring.data.neo4j.database=NEO4J_DATABASE_NAME

logging.level.org.springframework.data.neo4j=WARN

#slackBotToken=SLACK_BOT_TOKEN_HERE
#slackIncomingWebhookUrl=SLACK_INCOMING_WEBHOOK_URL_HERE

#Google cloud credentials
#spring.cloud.gcp.credentials.location=GCP_CREDENTIALS_LOCATION_HERE

#####
# Segment
#####
#segment.analytics.writeKey=SEGMENT_WRITE_KEY_HERE

##############################
# SENDGRID CONFIG (SendGridAutoConfiguration)
##############################
#spring.sendgrid.api-key=SENDGRID API KEY

#spring.sendgrid.username: # SendGrid account username (if API key not provided).
#spring.sendgrid.password: # SendGrid account password.

#spring.sendgrid.proxy.host: # SendGrid proxy host. (optional)
#spring.sendgrid.proxy.port: # SendGrid proxy port. (optional)


########
#  GCP Pub/Sub
########

# Bind the Supplier bean `sendMessageToTopicOne` to the Pub/Sub topic
# `topic-one`. If the topic does not exist, one will be created.
#spring.cloud.gcp.project-id=PROJECT_ID_HERE
#pubsub.error_topic=AUDIT_ERROR_TOPIC_HERE
#pubsub.audit_update=AUDIT_UPDATE_TOPIC_HERE


spring.cloud.gcp.project-id=test-project
pubsub.error_topic=audit-error-topic
pubsub.audit_update=audit-update-topic

#####
#  Integration  
#####

#integrations.product-board.private_key=PRODUCT_KEY_HERE

#####
# Pusher Configuration (for MessageBroadcaster service)
#####
# Pusher credentials are set via environment variables in Cloud Run:
# PUSHER_APP_ID, PUSHER_KEY, PUSHER_SECRET, PUSHER_CLUSTER
# 
# For local development, uncomment and set these properties:
# pusher.app-id=YOUR_PUSHER_APP_ID
# pusher.key=YOUR_PUSHER_KEY  
# pusher.secret=YOUR_PUSHER_SECRET
# pusher.cluster=YOUR_PUSHER_CLUSTER